#!/usr/bin/env bash

# Function for running a file of ex commands on a file, and then saving the
# result of these modifications to another file.
#
# $1: Path to file of ex commands
# $2: Input file
# $3: Output file
vimregexrunner() {
  vim -Nu NONE +"so $1 | w! $3 | q!" $2
}

#
# Modify before convert
#

vimregexrunner "~/.polytextum/regexes/before.vim" "$2" "$2.before"

#
# Convert
#

template=$HOME/.polytextum/templates

# Convert the various document types into temporary tex files
if [ $1 = "report" ]; then
  pandoc -f markdown -t latex $2.before -o $2.after \
    --template=$template/report.tex --top-level-division=chapter
elif [ $1 = "article" ]; then
  pandoc -f markdown -t latex $2.before -o $2.after \
    --template=$template/article.tex  --top-level-division=section
elif [ $1 = "pres" ]; then
  pandoc -f markdown -t beamer $2.before -o $2.after \
    --template=$template/pres.tex --slide-level=2
else
  echo "Specified document type not valid. Try using report, article, or pres."
fi

#
# Modify after convert
#

vimregexrunner "~/.polytextum/regexes/after.vim" "$2.after" "$2.tex"

#
# Clean up
#

# Remove all the temporary files that this script creates
rm $2.before
rm $2.after

#
# Compile
#

absolute_filename() {
  echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")"
}
output=$(dirname $(absolute_filename "$2"))

# First, we rename the generated latex file to output.tex to ensure the generated
# PDF is called output.pdf. Then we compile using latexmk. Finally, the
# generated latex files are removed.

mv $2.tex $output/output.tex

latexmk -pdflua -quiet $output/output.tex

mv $output/output.pdf $output/tmp
rm $output/output*
rm $output/*log
mv $output/tmp $output/output.pdf

